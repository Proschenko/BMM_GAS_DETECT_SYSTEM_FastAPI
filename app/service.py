"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —É—Ç–µ—á–µ–∫ —Å –ø–æ–º–æ—â—å—é YOLO –º–æ–¥–µ–ª–∏.
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- convert_to_mp4 - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ MP4 —Ñ–æ—Ä–º–∞—Ç
- process_video_with_annotations - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–æ–∫ –∏ bounding boxes
"""

import os
import cv2
import numpy as np
from ultralytics import YOLO
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def convert_to_mp4(input_path, output_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç MP4 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffmpeg.
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
    –ü—Ä–æ—Ü–µ—Å—Å:
        1. –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É ffmpeg —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    """
    ffmpeg_cmd = [
        "ffmpeg",
        "-y",
        "-i", input_path,
        "-c:v", "libx264",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–µ–∫ H.264
        "-preset", "fast",   # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å–∂–∞—Ç–∏–µ–º
        "-crf", "23",        # –ö–∞—á–µ—Å—Ç–≤–æ (0-51, –º–µ–Ω—å—à–µ - –ª—É—á—à–µ)
        "-movflags", "+faststart",  # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        output_path
    ]

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ ffmpeg: {' '.join(ffmpeg_cmd)}")
    try:
        subprocess.run(ffmpeg_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        logger.info("‚úÖ FFmpeg: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"[FFMPEG ERROR] –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e.stderr.decode(errors='ignore')}")
        return False
    except FileNotFoundError as e:
        logger.error(f"[FFMPEG ERROR] FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –≤ PATH: {e}")
        return False

def process_video_with_annotations(input_path, output_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª, –ø—Ä–∏–º–µ–Ω—è—è –º–æ–¥–µ–ª—å YOLO –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –∏ –¥–æ–±–∞–≤–ª—è—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
    –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏
        2. –ß—Ç–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞:
           - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–µ–≥–∞—Ç–∏–≤, CLAHE)
           - –î–µ—Ç–µ–∫—Ü–∏—è —Å –ø–æ–º–æ—â—å—é YOLO
           - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞—Å–∫–∏ –∏ bounding boxes)
        4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4
    """
    model_path = "models/leak_detectorv0.1.pt"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏

    if not os.path.exists(model_path):
        logger.error("‚ùå Model not found at %s", model_path)
        return False

    try:
        model = YOLO(model_path)  # –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏
        logger.info("‚úÖ YOLO model loaded")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ YOLO")
        return False

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
    cap = cv2.VideoCapture(input_path)
    if not cap.isOpened():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª: %s", input_path)
        return False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ
    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    original_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    original_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    logger.info(f"üìπ –í–∏–¥–µ–æ: {total_frames} –∫–∞–¥—Ä–æ–≤, {fps:.2f} fps, —Ä–∞–∑–º–µ—Ä: {original_width}x{original_height}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ (YOLO —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 640x640)
    output_size = (640, 640)
    scale_x = original_width / 640  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    scale_y = original_height / 640

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ (AVI —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏)
    tmp_path = output_path.replace(".mp4", "_raw.avi")
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(tmp_path, fourcc, fps, (original_width, original_height))

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
        for frame_idx in range(total_frames):
            ret, frame = cap.read()
            if not ret:
                logger.warning(f"‚ö†Ô∏è –ö–∞–¥—Ä {frame_idx} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
                break

            original = frame.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä

            # –ë–ª–æ–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞
            negative = 255 - frame  # –ò–Ω–≤–µ—Ä—Å–∏—è —Ü–≤–µ—Ç–æ–≤
            gray = cv2.cvtColor(negative, cv2.COLOR_BGR2GRAY)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))  # –°–æ–∑–¥–∞–Ω–∏–µ CLAHE —Ñ–∏–ª—å—Ç—Ä–∞
            gray_eq = clahe.apply(gray)  # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω–æ–π —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏–∏
            gray_rgb = cv2.cvtColor(gray_eq, cv2.COLOR_GRAY2RGB)  # –û–±—Ä–∞—Ç–Ω–æ –≤ RGB
            resized = cv2.resize(gray_rgb, output_size)  # –†–µ—Å–∞–π–∑ –¥–ª—è YOLO

            # –î–µ—Ç–µ–∫—Ü–∏—è —Å –ø–æ–º–æ—â—å—é YOLO
            results = model.predict(resized, imgsz=640, conf=0.4)  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–Ω–æ—Å—Ç–∏ 0.4
            result = results[0]
            logger.info(f"üß† –ö–∞–¥—Ä {frame_idx}: {len(result.boxes)} boxes, {len(result.masks) if result.masks else 0} masks")

            annotated = original.copy()  # –ö–æ–ø–∏—è –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Å–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if result.masks:
                for mask in result.masks.xy:
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Å–∫–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                    scaled_mask = np.array([[int(x * scale_x), int(y * scale_y)] for x, y in mask], np.int32)
                    cv2.polylines(annotated, [scaled_mask], True, (0, 255, 0), 2)  # –ö–æ–Ω—Ç—É—Ä –º–∞—Å–∫–∏
                    cv2.fillPoly(annotated, [scaled_mask], color=(0, 255, 0, 50))  # –ó–∞–ª–∏–≤–∫–∞ –º–∞—Å–∫–∏

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if result.boxes:
                for box in result.boxes:
                    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                    x1, y1, x2, y2 = map(int, [x1 * scale_x, y1 * scale_y, x2 * scale_x, x2 * scale_y])
                    cls_id = int(box.cls[0].item())  # ID –∫–ª–∞—Å—Å–∞
                    conf = float(box.conf[0].item())  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                    label = f"{model.names[cls_id]} {conf:.2f}"  # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cv2.rectangle(annotated, (x1, y1), (x2, y2), (0, 0, 255), 5)  # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    cv2.putText(annotated, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 5)  # –¢–µ–∫—Å—Ç

            out.write(annotated)  # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–∞–¥—Ä–∞

    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        cap.release()
        out.release()
        cv2.destroyAllWindows()

    logger.info("üíæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ MP4...")
    success = convert_to_mp4(tmp_path, output_path)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if success:
        os.remove(tmp_path)
        logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")
        return True
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–µ. –§–∞–π–ª: %s", tmp_path)
        return False